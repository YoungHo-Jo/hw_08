/*
 * touchSensor.c
 *
 *  Created on: 2017. 11. 27.
 *      Author: hw_8
 */

#include "stm32f10x_gpio.h"
#include "stm32f10x_exti.h"
#include "misc.h"

const uint16_t TOUCH_DO = GPIO_Pin_0;
const uint16_t TOUCH_RE = GPIO_Pin_1;
const uint16_t TOUCH_MI = GPIO_Pin_2;
const uint16_t TOUCH_FA = GPIO_Pin_3;
const uint16_t TOUCH_SO = GPIO_Pin_4;
const uint16_t TOUCH_LA = GPIO_Pin_5;
const uint16_t TOUCH_TI = GPIO_Pin_6;




GPIO_Pin_0
PE0
PB8
PB9
PB7
PB5
PB4
PB3
PA15

/**
 * Returns GPIO_PinSource according to the paramter GPIO_Pin
 */
int syllable = 0;

typedef struct __GPIO_setting_data {
    uint8_t pin_src;
    uint32_t exti_line;
    uint32_t exti_irqn;
    uint8_t port_src;
    GPIO_TypeDef * GPIOx;
} GPIO_setting_data;


GPIO_setting_data get_GPIO_Setting_Data(uint16_t key) {
    GPIO_setting_data gpio_setting_data;

    switch(key) {
        case (TOUCH_A) :
            	gpio_setting_data.pin_src = GPIO_PinSource0;
				gpio_setting_data.exti_line = EXTI_Line0;
				gpio_setting_data.exti_irqn = EXTI0_IRQn;
				gpio_setting_data.port_src = GPIO_PortSourceGPIOE;
				gpio_setting_data.GPIOx = GPIOE;
            	break;
        case (TOUCH_B) :
				gpio_setting_data.pin_src = GPIO_PinSource8;
				gpio_setting_data.exti_line = EXTI_Line8;
				gpio_setting_data.exti_irqn = EXTI9_5_IRQn;
				gpio_setting_data.port_src = GPIO_PortSourceGPIOB;
				gpio_setting_data.GPIOx = GPIOB;
		        break;
        case (TOUCH_C) :
				gpio_setting_data.pin_src = GPIO_PinSource9;
				gpio_setting_data.exti_line = EXTI_Line9;
				gpio_setting_data.exti_irqn = EXTI9_5_IRQn;
				gpio_setting_data.port_src = GPIO_PortSourceGPIOB;
				gpio_setting_data.GPIOx = GPIOB;
		           break;
        case (TOUCH_D) :
				gpio_setting_data.pin_src = GPIO_PinSource7;
				gpio_setting_data.exti_line = EXTI_Line7;
				gpio_setting_data.exti_irqn = EXTI9_5_IRQn;
				gpio_setting_data.port_src = GPIO_PortSourceGPIOB;
				gpio_setting_data.GPIOx = GPIOB;
		        break;
        case TOUCH_E:
        		gpio_setting_data.pin_src = GPIO_PinSource5;
        		gpio_setting_data.exti_line = EXTI_Line5;
        		gpio_setting_data.exti_irqn = EXTI9_5_IRQn;
        		gpio_setting_data.port_src = GPIO_PortSourceGPIOB;
        		gpio_setting_data.GPIOx = GPIOB;
        	    break;
        case TOUCH_F:
        		gpio_setting_data.pin_src = GPIO_PinSource4;
        		gpio_setting_data.exti_line = EXTI_Line4;
        		gpio_setting_data.exti_irqn = EXTI4_IRQn;
        		gpio_setting_data.port_src = GPIO_PortSourceGPIOB;
        		gpio_setting_data.GPIOx = GPIOB;
        	    break;
        case TOUCH_G:
        		gpio_setting_data.pin_src = GPIO_PinSource3;
        		gpio_setting_data.exti_line = EXTI_Line3;
        		gpio_setting_data.exti_irqn = EXTI3_IRQn;
        		gpio_setting_data.port_src = GPIO_PortSourceGPIOB;
        		gpio_setting_data.GPIOx = GPIOB;
        	    break;
    }
    return gpio_setting_data;
}


void GPIO_touch_init(uint16_t key) {
	GPIO_InitTypeDef GPIO_InitStructure;
	EXTI_InitTypeDef EXTI_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;
    GPIO_setting_data gpio_setting_data = get_GPIO_Setting_Data(key);

	GPIO_InitStructure.GPIO_Pin = key; // do
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
	GPIO_Init(gpio_setting_data.GPIOx, &GPIO_InitStructure);
	GPIO_EXTILineConfig(gpio_setting_data.port_src, gpio_setting_data.pin_src);

	EXTI_InitStructure.EXTI_Line = gpio_setting_data.exti_line;
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
    	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
	EXTI_Init(&EXTI_InitStructure);

	NVIC_InitStructure.NVIC_IRQChannel = gpio_setting_data.exti_irqn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x00;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x00;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
}
